## 1. 컴파일 언어
![](https://images.velog.io/images/tlsrlgkrry/post/f0137629-17f5-4086-805a-345a058d3bb2/image.png)
### 1-1. 실행과정🔎 
1. 소스코드 작성
2. 컴파일러를 통해 기계어(2진 코드)로 변환
3. CPU에서 실행

### 1-2. 특징📌
- 기계어로 컴파일된 실행파일을 실행하기 때문에 실행속도가 빠르다.
- 코드를 수정하면 다시 컴파일 과정을 거쳐야 한다.
- 운영체제 이식성이 낮다.
	➡️ OS마다 실행 할 수 있는 기계어가 다른 경우가 있다. 그러므로 해당 OS에 맞는 컴파일러로 다시 컴파일 해야한다.
- 번역과 실행이 완전히 따로 이루어진다.
- C, C++등이 있다.



---
## 2. 인터프리터 언어
![](https://images.velog.io/images/tlsrlgkrry/post/dd1c5296-7947-4100-9fd9-b507d94d9632/image.png)

### 1-1. 실행과정🔎 
1. 소스코드 작성
2. 컴파일러를 통해 기계어(2진 코드)로 변환
3. CPU에서 실행

### 1-2. 특징📌
- 컴파일 과정이 없어서 실행속도가 느리다.
- 실행 파일이 만들어지지 않는다.
- 운영체제 이식성이 높다.
	➡️ OS마다 호환되는 인터프리터만 준비되어 있다면 바로 실행이 가능하다!
- 한번에 한줄씩 읽어 번역(JVM), 실행(CPU)가 동시에 일어난다.
- Java, JavaScript가 있다.


---

## 3. 표로 한번에 정리
|구분|컴파일러|인터프리터|
|:---:|:---:|:---:|
|번역 단위|전체|줄|
|실행 파일|생성|생성 X|
|실행 속도|빠름|느림|
|번역 속도|느림|빠름|
